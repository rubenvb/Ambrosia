{"name":"Ambrosia","tagline":"The nectar of the gods fueling your software builds","body":"### The What\r\n\r\nAmbrosia aims to be an extendable, easy to learn and use, and above all fast build system for all your software. Simple syntax and transparent dependency handling takes the edge off maintaining complex projects. The split between application and library allows for IDEs and 3rd-party tools to tap into the power of Ambrosia, easing the development of plugins and tools to manage, develop, and manipulate your software projects.\r\n\r\n### The Why\r\n\r\nSo, yet another build system? Don't we already have enough of those?\r\n\r\nNo.\r\n\r\nLet's sum up some of the big ones:\r\n\r\n> Notice: the list below expresses only the humble mostly uninformed and unexperienced opinion of the author.\r\n> It is by no means an exhaustive comparison, but instead highlights what the author feels are shortcomings to be solved by Ambrosia.\r\n\r\n* CMake: is actually a pre-build system, although extensive and time-tested, its underlying foundation is another build system or command execution tool.\r\n* Autotools: has great cross-platform support, except on Windows. Generated files and hackish platform support at best make this my all-time mmost hated system. Granted, it will probably always be able to do more than Ambrosia ever could, but its implementation is quite archaic.\r\n* make: raw Makefiles are handy for small projects, but it is really not much more than a fancy command execution engine, with a bit of C/C++-specific dependency handling and an awful syntax.\r\n* MSBuild: I suppose it can be used to effectively manage Visual Studio projects, but that's about it. No chance of cross-platform support. Also, the syntax is horribly verbose and not human-readable.\r\n* ninja: praised for its speed and useful through CMake's support for it. Make on steroids.\r\n* qmake: like CMake, a prebuild system. Quite simple to use and great support for Qt. Dependency handling can get quite verbose.\r\n* SCons: fully scripted Python based build system. Often praised for its usefulness and relative speed, although it is complicated to use.\r\n\r\n### The How\r\n\r\n## Getting Ambrosia\r\n\r\nTo start using Ambrosia, checkout the git repository:\r\n```\r\ngit clone git://github.com/rubenvb/Ambrosia.git\r\nmkdir Ambrosia-build && cd Ambrosia-build\r\n```\r\n\r\n## Building Ambrosia\r\n\r\n> Notice: the Ambrosia `master` branch is not guaranteed to build or be functional.\r\n> Once stability surfaces, stable branches will be created, and maybe even release tags.\r\n\r\nYou'll need CMake 2.8 and at least Clang 3.2, GCC 4.8, or MSVC 2012 (currently unable to handle the C++11 sparkles in the codebase though) to build Ambrosia.\r\n```\r\ncmake ../Ambrosia\r\nmake\r\n```\r\nThe last commands may differ slightly for your system. On Windows, you'll need a recent MinGW-w64 compiler (which the author of this project so kindly provides) for [32-bit](http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/rubenvb/) and [64-bit](http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/rubenvb/) Windows. Then you'll need to run these commands instead of the above:\r\n```\r\ncmake ../Ambrosia -G\"MinGW Makefiles\"\r\nmingw32-make\r\n```\r\nObviously, it is the idea that there will be prebuilt binaries of Ambrosia that can be used to build Ambrosia itself, which is intermittently possible, but to ease development (read: IDE support), a CMake build is also maintained.\r\n\r\n## Using Ambrosia\r\n\r\nThe Ambrosia git repository contains an `example` directory, which contains a bunch of [Xiph](http://xiph.org/) libraries, which had enough interdependencies to provide the real-world test-bed for Ambrosia's usefulness. In the various subdirectories are `.nectar.txt` files which provide a simple (see _e.g._ `libogg`) to more complicated (see _e.g._ `flac`) project files. Ambrosia itself also has 3 project files displaying basic features.\r\n\r\nTo build your project with Ambrosia, just run\r\n```\r\nAmbrosia ../path/to/location/of/nectar.txt/file\r\n```\r\nThe debug build outputs all the gorey details, the release build currently is quite silent (until an error occurs), but a task manager should be able to inform you what is happening during those long periods of silence.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}